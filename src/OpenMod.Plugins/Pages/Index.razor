@page "/"
@page "/search/"

@implements IDisposable

@inject NavigationManager NavigationManager
@inject IPluginRepository PluginRepository

@if (_pluginsResponce == null)
{
    <MudText Typo="Typo.body1">Loading</MudText>
}
else
{
    <MudText Typo="Typo.h4">
        @Smart.Format("There {0:plural:is 1 plugin|are {} plugins}", _pluginsResponce.Total)
    </MudText>
    <br>
    <br>
    <MudGrid>
        @foreach (var plugin in _pluginsResponce.Plugins)
        {
            <PluginCard Data="@plugin"/>
        }
    </MudGrid>
    <SearchPageNavigation PreviousPageLink="@_previousPageLink" NextPageLink="@_nextPageLink"/>
}

@code {

    private PluginsResponse? _pluginsResponce;
    private string? _previousPageLink;
    private string? _nextPageLink;

    protected override async Task OnInitializedAsync()
    {
        await LoadPluginsAsync();
        NavigationManager.LocationChanged += HandleLocationChanged;
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

    private async Task LoadPluginsAsync()
    {
        int currentPage = NavigationManager.GetQuery<int>("page");
        int pageSize = 20;

        _pluginsResponce = await PluginRepository.SearchAsync(
            query: "",
            skip: currentPage * pageSize,
            take: pageSize,
            includePrerelease: true);

        int lastPage = (int) ((_pluginsResponce.Total + pageSize - 1) / pageSize) - 1;

        _previousPageLink = currentPage == 0
            ? null
            : "search?page=" + (currentPage > lastPage ? lastPage : currentPage - 1);

        _nextPageLink = currentPage >= lastPage
            ? null
            : "search?page=" + (currentPage + 1);
    }

    private async void HandleLocationChanged(object? sender, LocationChangedEventArgs args)
    {
        _pluginsResponce = null;
        StateHasChanged();

        await LoadPluginsAsync();
        StateHasChanged();
    }

}
