@page "/search"

@implements IDisposable

@inject NavigationManager NavigationManager
@inject IPluginRepository PluginRepository

@if (_pluginsResponce == null)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true"/>
}
else
{
    <MudText Typo="Typo.h4">
        @if (string.IsNullOrEmpty(_searchQuery))
        {
            @Smart.Format("There {0:plural:is 1 plugin|are {} plugins}", _pluginsResponce.Total)
        }
        else
        {
            @Smart.Format("{0:plural:1 plugin|{} plugins} returned for {1}", _pluginsResponce.Total, _searchQuery)
        }
    </MudText>
    <br>
    <br>
    <MudGrid>
        @if (_currentPage > 0 && _pluginsResponce.Total > 0 && _pluginsResponce.Plugins.Count == 0)
        {
            <MudAlert Severity="Severity.Error" Variant="Variant.Text" Style="width: inherit;">No plugins found on this page.</MudAlert>
        }
        else
        {
            foreach (var plugin in _pluginsResponce.Plugins)
            {
                <PluginCard Data="@plugin"/>
            }
        }
    </MudGrid>
    <SearchPageNavigation PreviousPageLink="@_previousPageLink" NextPageLink="@_nextPageLink"/>
}

@code {

    private PluginsResponse? _pluginsResponce;
    private string? _previousPageLink;
    private string? _nextPageLink;
    private string _searchQuery = string.Empty;
    private int _currentPage;

    protected override async Task OnInitializedAsync()
    {
        await LoadPluginsAsync();
        NavigationManager.LocationChanged += HandleLocationChanged;
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= HandleLocationChanged;
    }

    private async Task LoadPluginsAsync()
    {
        _searchQuery = NavigationManager.GetQuery<string>("query", defaultValue: string.Empty);
        _currentPage = NavigationManager.GetQuery<int>("page");
        int pageSize = 20;

        _pluginsResponce = await PluginRepository.SearchAsync(
            query: _searchQuery,
            skip: _currentPage * pageSize,
            take: pageSize,
            includePrerelease: true);

        int lastPage = (int) ((_pluginsResponce.Total + pageSize - 1) / pageSize) - 1;
        int previousPage = _currentPage > lastPage ? lastPage : _currentPage - 1;
        int nextPage = _currentPage + 1;

        _previousPageLink = _currentPage == 0
            ? null
            : $"search?page={previousPage}&query={_searchQuery}";

        _nextPageLink = _currentPage >= lastPage
            ? null
            : $"search?page={nextPage}&query={_searchQuery}";
    }

    private async void HandleLocationChanged(object? sender, LocationChangedEventArgs args)
    {
        _pluginsResponce = null;
        StateHasChanged();

        await LoadPluginsAsync();
        StateHasChanged();
    }

}
