@using Microsoft.Extensions.Logging

@inject ILogger<PluginCard> Logger
@inject ISnackbar Snackbar
@inject IJSRuntime JsRuntime

<MudItem xs="12" md="12">
    <MudCard>
        <MudCardHeader Style="padding-bottom: 0">
            <CardHeaderContent>
                <MudText Typo="Typo.h5" Style="overflow-wrap: anywhere;">
                    @if (Data.Tags.Contains("universal", StringComparer.OrdinalIgnoreCase))
                    {
                        <MudChip Size="Size.Small" Style="margin-right: 10px; color: white; background-color: #d41354;">
                            Universal
                        </MudChip>
                    }
                    @if (Data.Tags.Contains("unturned", StringComparer.OrdinalIgnoreCase))
                    {
                        <MudChip Size="Size.Small" Style="margin-right: 10px; color: white; background-color: #006b2c;">
                            Unturned
                        </MudChip>
                    }
                    @Data.Id
                    @if (Data.IsOfficial)
                    {
                        <MudTooltip Text="This plugin is created by OpenMod" Placement="Placement.Top">
                            <MudIcon Icon="@Icons.Material.Filled.CheckCircle"
                                     Color="Color.Info"
                                     Size="Size.Small"
                                     Style="margin-left: 10px;"/>
                        </MudTooltip>
                    }
                    <MudText Typo="Typo.subtitle1" Style="display: inline-block; margin-left: 10px;">
                        by @StringUtils.Commaize(Data.Authors)
                    </MudText>
                </MudText>
                <PluginCardInfoItem Icon="@Icons.Material.Outlined.Download" IsFirst="true">
                    @(Data.TotalDownloads == 1 ? "1 download" : $"{Data.TotalDownloads:n0} downloads")
                </PluginCardInfoItem>
                <PluginCardInfoItem Icon="@Icons.Material.Outlined.Flag">
                    latest version: @Data.LatestVersion
                </PluginCardInfoItem>
            </CardHeaderContent>
            <CardHeaderActions>
                <div style="display: inline-flex;">
                    <MudHidden Breakpoint="Breakpoint.SmAndUp" Invert="true">
                        <MudTooltip Text="View license" Placement="Placement.Top">
                            <MudButton Link="@Data.LicenseUrl" Target="_blank" Style="margin-top: 6px;">License</MudButton>
                        </MudTooltip>
                    </MudHidden>
                    <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="true">
                        <MudTooltip Text="Copy install command" Placement="Placement.Top">
                            <MudButton Style="margin-top: 6px;" @onclick="@CopyToClipboardAsync">Copy install command</MudButton>
                        </MudTooltip>
                    </MudHidden>
                    <MudMenu Icon="@Icons.Material.Filled.MoreVert" Direction="Direction.Bottom" OffsetY="true">
                        <MudHidden Breakpoint="Breakpoint.MdAndUp" Invert="false">
                            <MudMenuItem Link="@Data.LicenseUrl" Target="_blank">License</MudMenuItem>
                            <MudMenuItem @onclick="@CopyToClipboardAsync">Copy install command</MudMenuItem>
                        </MudHidden>
                        <MudMenuItem Link="@Data.SiteUrl" Target="_blank" Disabled="@(Data.SiteUrl == null)">Home page</MudMenuItem>
                        <MudMenuItem Link="@Data.NuGetUrl" Target="_blank">NuGet page</MudMenuItem>
                    </MudMenu>
                </div>
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardContent Style="@(Data.Description == "" ? "padding-top: 0;" : "")">
            <MudText Typo="Typo.body1">@Data.Description</MudText>
        </MudCardContent>
    </MudCard>
</MudItem>

@code {

    [Parameter]
    public Plugin Data { get; set; } = null!;

    // todo: refactor to a separate component?
    private async Task CopyToClipboardAsync()
    {
        try // Writing to the clipboard may be denied, so we must handle the exception
        {
            await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", Data.CommandInstall);
            Snackbar.Add("Command copied!", Severity.Success);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to copy to clipboard");
            Snackbar.Add("Failed to copy!", Severity.Error);
        }
    }

}
